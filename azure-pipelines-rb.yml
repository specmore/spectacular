# Docker
# Build and push an image to Azure Container Registry
# https://docs.microsoft.com/azure/devops/pipelines/languages/docker

trigger:
  branches:
    include:
    - master

variables:
  azureSubscriptionEndpoint: spectacular-azurerm
  dockerRegistryServiceConnection: 'b49e6e37-26c8-421e-ac20-c8ea6239311e'
  containerRegistry: 'spectacular.azurecr.io'
  testCandidateRepositoryName: test-candidate 
  releaseCandidateRepositoryName: release-candidate 
  imagePullSecret: 'spectacular-auth'
  manifestArtifactName: 'backend-manifests'
  tag: '$(Build.BuildId)'
  
  # Agent VM image name
  vmImageName: 'ubuntu-latest'

stages:
- stage: Build
  displayName: Build, unit test and push images
  jobs:  
  - job: BuildBackend
    displayName: Build Backend Service
    pool:
      vmImage: $(vmImageName)
    steps:
    - task: Docker@2
      displayName: Build and push an image to container registry
      inputs:
        command: buildAndPush
        repository: $(testCandidateRepositoryName)/backend
        dockerfile: 'github-service/Dockerfile'
        containerRegistry: $(dockerRegistryServiceConnection)
        tags: $(tag)
  - job: BuildWeb
    displayName: Build Web App
    pool:
      vmImage: $(vmImageName)
    steps:
    - task: Docker@2
      displayName: Build and push an image to container registry
      inputs:
        command: buildAndPush
        repository: $(testCandidateRepositoryName)/web
        dockerfile: 'ui/Dockerfile'
        containerRegistry: $(dockerRegistryServiceConnection)
        tags: $(tag)

- stage: IntegrationTesting
  displayName: Integration Testing
  jobs:  
  - job: E2EUITests
    displayName: End to End UI Tests
    variables:
      - group: docker-compose-variables
    pool:
      vmImage: $(vmImageName)
    steps:
    - task: DownloadSecureFile@1
      displayName: Download GitHub App Signing Key
      name: githubAppSigningKey
      inputs:
        secureFile: 'spectacular-dev-app.2020-01-26.private-key.pem'
    - task: DockerCompose@0
      displayName: Run services
      env:
        SPECTACULAR_JWT_SHARED_SECRET: $(SPECTACULAR_JWT_SHARED_SECRET)
        SPECTACULAR_GITHUB_APP_PRIVATE_KEY_FILE_PATH: $(githubAppSigningKey.secureFilePath)
        SPECTACULAR_IMAGE_TAG: $(tag)
      inputs:
        action: Run services
        azureSubscriptionEndpoint: $(azureSubscriptionEndpoint)
        azureContainerRegistry: $(containerRegistry)
        dockerComposeFile: ./integration-tests/docker-compose.ui-e2e.yml
        projectName: spectacular
        buildImages: false
        abortOnContainerExit: true
        detached: true
    - bash: docker ps
      displayName: List container
    - bash: docker run -v $PWD/ui-e2e:/e2e -w /e2e -e "CYPRESS_baseUrl=http://host.docker.internal:80" --add-host=host.docker.internal:$(ip route | grep docker0 | awk '{print $9}') cypress/included:3.3.2
      workingDirectory: '$(Build.SourcesDirectory)/integration-tests'
      displayName: Run cypress tests
    - task: DockerCompose@0
      displayName: Print Docker Compose logs
      condition: always()
      env:
        SPECTACULAR_JWT_SHARED_SECRET: $(SPECTACULAR_JWT_SHARED_SECRET)
        SPECTACULAR_GITHUB_APP_PRIVATE_KEY_FILE_PATH: $(githubAppSigningKey.secureFilePath)
        SPECTACULAR_IMAGE_TAG: $(tag)
      inputs:
        action: Run a Docker Compose command
        azureSubscriptionEndpoint: $(azureSubscriptionEndpoint)
        azureContainerRegistry: $(containerRegistry)
        dockerComposeFile: ./integration-tests/docker-compose.ui-e2e.yml
        projectName: spectacular
        dockerComposeCommand: logs

- stage: CreateReleaseCandidate
  displayName: Tag as a Release Candidate
  jobs:
  - job: TagImage
    displayName: Tag and Push image
    pool:
      vmImage: $(vmImageName)
    steps:
    - task: Docker@2
      displayName: Login to ACR
      inputs:
        command: login
        containerRegistry: $(dockerRegistryServiceConnection)
    - task: Docker@2
      displayName: Pull backend Test Candidate image
      inputs:
        command: pull
        arguments: $(containerRegistry)/$(testCandidateRepositoryName)/backend:$(tag)
    - task: Docker@2
      displayName: Tag backend Release Candidate image
      inputs:
        command: tag
        arguments: $(containerRegistry)/$(testCandidateRepositoryName)/backend:$(tag) $(containerRegistry)/$(releaseCandidateRepositoryName)/backend:$(tag)
    - task: Docker@2
      displayName: Push backend Release Candidate image
      inputs:
        command: push
        containerRegistry: $(dockerRegistryServiceConnection)
        repository: $(releaseCandidateRepositoryName)/backend
        tags: $(tag)
    - task: Docker@2
      displayName: Pull web Test Candidate image
      inputs:
        command: pull
        arguments: $(containerRegistry)/$(testCandidateRepositoryName)/web:$(tag)
    - task: Docker@2
      displayName: Tag web Release Candidate image
      inputs:
        command: tag
        arguments: $(containerRegistry)/$(testCandidateRepositoryName)/web:$(tag) $(containerRegistry)/$(releaseCandidateRepositoryName)/web:$(tag)
    - task: Docker@2
      displayName: Push web Release Candidate image
      inputs:
        command: push
        containerRegistry: $(dockerRegistryServiceConnection)
        repository: $(releaseCandidateRepositoryName)/web
        tags: $(tag)
  - job: TagSource
    displayName: Tag git repository
    pool:
      vmImage: $(vmImageName)
    steps:
    - checkout: self
      persistCredentials: true
    - bash: git tag rc-$(tag)
      displayName: Git Tag
    - bash: git push --tags
      displayName: Push Git Tags
