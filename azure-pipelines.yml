# Build, test and push images to Azure Container Registry

trigger:
  branches:
    include:
    - master

variables:
  azureSubscriptionEndpoint: spectacular-azurerm
  #dockerRegistryServiceConnection: 'b49e6e37-26c8-421e-ac20-c8ea6239311e'
  imageRepository: 'spectacular-release-candidate'
  containerRegistry: 'spectacular.azurecr.io'
  imagePullSecret: 'spectacular-auth'
  manifestArtifactName: 'backend-manifests'
  tag: '$(Build.BuildId)'

  # Agent VM image name
  vmImageName: 'ubuntu-latest'

stages:
- stage: Build
  displayName: Build, test and push stage
  jobs:
  - job: Build
    displayName: Build, test and push stage
    variables:
      - group: docker-compose-variables
    pool:
      vmImage: $(vmImageName)
    steps:
    - task: DownloadSecureFile@1
      displayName: Download GitHub App Signing Key
      name: githubAppSigningKey
      inputs:
        secureFile: 'spectacular-dev-app.2020-01-26.private-key.pem'
    - task: DockerCompose@0
      displayName: Build services
      env:
        SPECTACULAR_JWT_SHARED_SECRET: $(SPECTACULAR_JWT_SHARED_SECRET)
        SPECTACULAR_GITHUB_APP_PRIVATE_KEY_FILE_PATH: $(githubAppSigningKey.secureFilePath)
      inputs:
        action: Build services
        azureSubscriptionEndpoint: $(azureSubscriptionEndpoint)
        azureContainerRegistry: $(containerRegistry)
        dockerComposeFile: docker-compose.yml
        projectName: $(Build.Repository.Name)
        qualifyImageNames: true
        additionalImageTags: $(Build.BuildId)
    - task: DockerCompose@0
      displayName: Run services
      env:
        SPECTACULAR_JWT_SHARED_SECRET: $(SPECTACULAR_JWT_SHARED_SECRET)
        SPECTACULAR_GITHUB_APP_PRIVATE_KEY_FILE_PATH: $(githubAppSigningKey.secureFilePath)
      inputs:
        action: Run services
        azureSubscriptionEndpoint: $(azureSubscriptionEndpoint)
        azureContainerRegistry: $(containerRegistry)
        dockerComposeFile: docker-compose.yml
        projectName: $(Build.Repository.Name)
        qualifyImageNames: true
        buildImages: false
        abortOnContainerExit: true
        detached: true
    - task: Bash@3
      displayName: docker ps
      inputs:
        targetType: 'inline'
        script: docker ps
    - task: Bash@3
      displayName: curl web
      inputs:
        targetType: 'inline'
        script: curl http://localhost:80
    - bash: docker run -v $PWD/:/e2e -w /e2e -e "CYPRESS_baseUrl=http://host.docker.internal:80" --add-host=host.docker.internal:$(ip route | grep docker0 | awk '{print $9}') cypress/included:3.3.2
      workingDirectory: '$(Build.SourcesDirectory)/integration-tests'
      displayName: Run cypress tests
      continueOnError: true
    - task: DockerCompose@0
      displayName: Docker Compose logs
      inputs:
        action: Run a Docker Compose command
        azureSubscriptionEndpoint: $(azureSubscriptionEndpoint)
        azureContainerRegistry: $(containerRegistry)
        dockerComposeFile: docker-compose.yml 
        projectName: $(Build.Repository.Name)
        qualifyImageNames: true
        dockerComposeCommand: logs
