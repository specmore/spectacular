# Docker
# Build and push an image to Azure Container Registry
# https://docs.microsoft.com/azure/devops/pipelines/languages/docker

trigger:
  branches:
    include:
    - master
  paths:
    include:
    - web/*
    - backend/*
    - integration-tests/*
    - azure-pipelines.yml

variables:
  azureSubscriptionEndpoint: spectacular-azurerm
  dockerRegistryServiceConnection: 'b49e6e37-26c8-421e-ac20-c8ea6239311e'
  containerRegistry: 'spectacular.azurecr.io'
  testCandidateRepositoryName: test-candidate
  releaseCandidateRepositoryName: release-candidate
  imagePullSecret: 'spectacular-auth'
  manifestArtifactName: 'backend-manifests'
  tag: '$(Build.BuildId)'
  GitVersion.SemVer: ''
  GitVersion.FullSemVer: ''

  # Agent VM image name
  vmImageName: 'ubuntu-latest'


stages:
- stage: Build
  displayName: Build, Test and Push Test Candidate images
  jobs:
  - job: SetVersion
    displayName: Calc Version Number
    pool:
      vmImage: $(vmImageName)
    steps:
    - task: UseGitVersion@5
      displayName: Run GitVersion
      name: GitVersionTask
      inputs:
        versionSpec: '5.x'
    - bash: echo SemVer $(GitVersion.SemVer);
            echo FullSemVer $(GitVersion.FullSemVer);
      displayName: Display versions
  - job: BuildBackend
    displayName: Build Backend Service image
    dependsOn: SetVersion
    variables:
      GitVersion.FullSemVer: $[ dependencies.SetVersion.outputs['GitVersionTask.GitVersion.FullSemVer'] ]
    pool:
      vmImage: $(vmImageName)
    steps:
    - bash: echo SemVer $(GitVersion.SemVer);
            echo FullSemVer $(GitVersion.FullSemVer);
      displayName: Display versions
    - task: Docker@2
      displayName: Build image
      inputs:
        command: build
        repository: $(testCandidateRepositoryName)/backend
        containerRegistry: $(dockerRegistryServiceConnection)
        dockerfile: 'backend/Dockerfile'
        arguments: --build-arg SEMVER=$(GitVersion.FullSemVer)
        tags: |
          $(tag)
          $(GitVersion.FullSemVer)
    - task: Docker@2
      displayName: Push image to container registry
      inputs:
        command: buildAndPush
        repository: $(testCandidateRepositoryName)/backend
        dockerfile: 'backend/Dockerfile'
        containerRegistry: $(dockerRegistryServiceConnection)
        tags: |
          $(tag)
          $(GitVersion.FullSemVer)
  - job: BuildWeb
    displayName: Build Web App image
    dependsOn: SetVersion
    variables:
      GitVersion.FullSemVer: $[ dependencies.SetVersion.outputs['GitVersionTask.GitVersion.FullSemVer'] ]
    pool:
      vmImage: $(vmImageName)
    steps:
    - task: Docker@2
      displayName: Build and push an image to container registry
      inputs:
        command: buildAndPush
        repository: $(testCandidateRepositoryName)/web
        dockerfile: 'web/Dockerfile'
        containerRegistry: $(dockerRegistryServiceConnection)
        tags: |
          $(tag)
          $(GitVersion.FullSemVer)
  # - job: TagSource
  #   displayName: Tag git repository with build number
  #   pool:
  #     vmImage: $(vmImageName)
  #   steps:
  #   - checkout: self
  #     persistCredentials: true
  #   - bash: git tag build-$(tag)
  #     displayName: Git Tag
  #   - bash: git push --tags
  #     displayName: Push Git Tags

- stage: IntegrationTesting
  displayName: Integration Testing
  jobs:
  - job: E2EUITests
    displayName: End to End UI Tests
    variables:
      - group: docker-compose-variables
    pool:
      vmImage: $(vmImageName)
    steps:
    - task: DownloadSecureFile@1
      displayName: Download GitHub App Signing Key
      name: githubAppSigningKey
      inputs:
        secureFile: 'spectacular-dev-app.2020-01-26.private-key.pem'
    - task: DockerCompose@0
      displayName: Run services
      env:
        SPECTACULAR_JWT_SHARED_SECRET: $(SPECTACULAR_JWT_SHARED_SECRET)
        SPECTACULAR_GITHUB_APP_PRIVATE_KEY_FILE_PATH: $(githubAppSigningKey.secureFilePath)
        SPECTACULAR_IMAGE_TAG: $(tag)
      inputs:
        action: Run services
        azureSubscriptionEndpoint: $(azureSubscriptionEndpoint)
        azureContainerRegistry: $(containerRegistry)
        dockerComposeFile: ./integration-tests/docker-compose.ui-e2e.yml
        projectName: spectacular
        buildImages: false
        abortOnContainerExit: true
        detached: true
    - bash: docker ps
      displayName: List container
    - bash: docker run -v $PWD/ui-e2e:/e2e -w /e2e -e "CYPRESS_baseUrl=http://host.docker.internal:80" --add-host=host.docker.internal:$(ip route | grep docker0 | awk '{print $9}') cypress/included:3.3.2
      workingDirectory: '$(Build.SourcesDirectory)/integration-tests'
      displayName: Run cypress tests
    - task: DockerCompose@0
      displayName: Print Docker Compose logs
      condition: always()
      env:
        SPECTACULAR_JWT_SHARED_SECRET: $(SPECTACULAR_JWT_SHARED_SECRET)
        SPECTACULAR_GITHUB_APP_PRIVATE_KEY_FILE_PATH: $(githubAppSigningKey.secureFilePath)
        SPECTACULAR_IMAGE_TAG: $(tag)
      inputs:
        action: Run a Docker Compose command
        azureSubscriptionEndpoint: $(azureSubscriptionEndpoint)
        azureContainerRegistry: $(containerRegistry)
        dockerComposeFile: ./integration-tests/docker-compose.ui-e2e.yml
        projectName: spectacular
        dockerComposeCommand: logs

- stage: CreateReleaseCandidate
  displayName: Tag images as Release Candidates
  jobs:
  - job: TagImage
    displayName: Tag and Push images
    pool:
      vmImage: $(vmImageName)
    steps:
    - task: Docker@2
      displayName: Login to ACR
      inputs:
        command: login
        containerRegistry: $(dockerRegistryServiceConnection)
    - task: Docker@2
      displayName: Pull backend Test Candidate image
      inputs:
        command: pull
        arguments: $(containerRegistry)/$(testCandidateRepositoryName)/backend:$(tag)
    - task: Docker@2
      displayName: Tag backend Release Candidate image
      inputs:
        command: tag
        arguments: $(containerRegistry)/$(testCandidateRepositoryName)/backend:$(tag) $(containerRegistry)/$(releaseCandidateRepositoryName)/backend
    - task: Docker@2
      displayName: Push backend Release Candidate image
      inputs:
        command: push
        containerRegistry: $(dockerRegistryServiceConnection)
        repository: $(releaseCandidateRepositoryName)/backend
        tags: latest
    - task: Docker@2
      displayName: Pull web Test Candidate image
      inputs:
        command: pull
        arguments: $(containerRegistry)/$(testCandidateRepositoryName)/web:$(tag)
    - task: Docker@2
      displayName: Tag web Release Candidate image
      inputs:
        command: tag
        arguments: $(containerRegistry)/$(testCandidateRepositoryName)/web:$(tag) $(containerRegistry)/$(releaseCandidateRepositoryName)/web
    - task: Docker@2
      displayName: Push web Release Candidate image
      inputs:
        command: push
        containerRegistry: $(dockerRegistryServiceConnection)
        repository: $(releaseCandidateRepositoryName)/web
        tags: latest
  # - job: TagSource
  #   displayName: Tag git repository
  #   pool:
  #     vmImage: $(vmImageName)
  #   steps:
  #   - checkout: self
  #     persistCredentials: true
  #   - bash: git tag rc-$(tag)
  #     displayName: Git Tag
  #   - bash: git push --tags
  #     displayName: Push Git Tags
