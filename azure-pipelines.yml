# Docker
# Build and push an image to Azure Container Registry
# https://docs.microsoft.com/azure/devops/pipelines/languages/docker

trigger:
  branches:
    include:
    - master
  paths:
    include:
    - web/*
    - backend/*
    - integration-tests/*
    - azure-pipelines.yml

variables:
  dockerHubServiceConnection: Specmore Docker Hub
  tag: '$(Build.BuildId)'
  GitVersion.ShortSha: ''
  GitVersion.SemVer: ''
  GitVersion.FullSemVer: ''

  # Agent VM image name
  vmImageName: 'ubuntu-latest'


stages:
- stage: Build
  displayName: Build, Test and Push Test Candidate images
  jobs:
  - job: SetVersion
    displayName: Calc Version Number
    pool:
      vmImage: $(vmImageName)
    steps:
    - task: gitversion/setup@0
      displayName: Install GitVersion
      inputs:
        versionSpec: '5.x'
    - task: gitversion/execute@0
      name: GitVersionTask
      displayName: Use GitVersion
    - bash: echo ShortSha $(GitVersion.ShortSha);
            echo SemVer $(GitVersion.SemVer);
            echo FullSemVer $(GitVersion.FullSemVer);
      displayName: Display versions

  - job: BuildBackend
    displayName: Build Backend Service image
    dependsOn: SetVersion
    variables:
      GitVersion.SemVer: $[ dependencies.SetVersion.outputs['GitVersionTask.GitVersion.SemVer'] ]
      GitVersion.FullSemVer: $[ dependencies.SetVersion.outputs['GitVersionTask.GitVersion.FullSemVer'] ]
      GitVersion.ShortSha: $[ dependencies.SetVersion.outputs['GitVersionTask.GitVersion.ShortSha'] ]
    pool:
      vmImage: $(vmImageName)
    steps:
    - bash: docker build -f docker/Dockerfile-backend --target build --build-arg SEMVER=$(GitVersion.FullSemVer) -t backend-build-stage .;
            id=$(docker create backend-build-stage);
            mkdir out;
            docker cp $id:/app/build/test-results ./out/results;
            docker rm $id;
      displayName: Run Docker build stage
    - task: PublishTestResults@2
      inputs:
        testRunner: JUnit
        testResultsFiles: 'out/results/**/TEST-*.xml'
        failTaskOnFailedTests: true
        testRunTitle: Backend Build Tests
    - task: Docker@2
      displayName: Build final image
      inputs:
        command: build
        repository: specmore/spectacular-backend-test-candidate
        containerRegistry: $(dockerHubServiceConnection)
        buildContext: .
        dockerfile: 'docker/Dockerfile-backend'
        arguments: --build-arg SEMVER=$(GitVersion.FullSemVer)
        tags: |
          $(tag)
          $(GitVersion.SemVer)
    - task: Docker@2
      displayName: Push image to container registry
      inputs:
        command: push
        repository: specmore/spectacular-backend-test-candidate
        buildContext: .
        dockerfile: 'docker/Dockerfile-backend'
        containerRegistry: $(dockerHubServiceConnection)
        tags: |
          $(tag)
          $(GitVersion.SemVer)

  - job: BuildWeb
    displayName: Build Web App image
    dependsOn: SetVersion
    variables:
      GitVersion.SemVer: $[ dependencies.SetVersion.outputs['GitVersionTask.GitVersion.SemVer'] ]
      GitVersion.FullSemVer: $[ dependencies.SetVersion.outputs['GitVersionTask.GitVersion.FullSemVer'] ]
      GitVersion.ShortSha: $[ dependencies.SetVersion.outputs['GitVersionTask.GitVersion.ShortSha'] ]
    pool:
      vmImage: $(vmImageName)
    steps:
    - bash: docker build -f docker/Dockerfile-web --target build --build-arg SEMVER=$(GitVersion.FullSemVer) -t web-build-stage .;
            id=$(docker create web-build-stage);
            mkdir out;
            docker cp $id:/usr/src/app/out/results ./out/results;
            docker rm $id;
      displayName: Run Docker build stage
    - task: PublishTestResults@2
      inputs:
        testRunner: JUnit
        testResultsFiles: 'out/results/**/junit.xml'
        failTaskOnFailedTests: true
        testRunTitle: Web Build Tests
    - task: Docker@2
      displayName: Build final image
      inputs:
        command: build
        repository: specmore/spectacular-web-test-candidate
        containerRegistry: $(dockerHubServiceConnection)
        buildContext: .
        dockerfile: 'docker/Dockerfile-web'
        arguments: --build-arg SEMVER=$(GitVersion.FullSemVer) --build-arg SHORTSHA=$(GitVersion.ShortSha)
        tags: |
          $(tag)
          $(GitVersion.SemVer)
    - task: Docker@2
      displayName: Push image to container registry
      inputs:
        command: push
        repository: specmore/spectacular-web-test-candidate
        buildContext: .
        dockerfile: 'docker/Dockerfile-web'
        containerRegistry: $(dockerHubServiceConnection)
        tags: |
          $(tag)
          $(GitVersion.SemVer)

- stage: IntegrationTesting
  displayName: Integration Testing
  jobs:
  - job: E2EUITests
    displayName: End to End UI Tests
    variables:
      - group: docker-compose-variables
    pool:
      vmImage: $(vmImageName)
    steps:
    - task: ShellScript@2
      displayName: Run integration tests
      inputs:
        scriptPath: run-int-tests.ci.sh
    # - bash: run-int-tests.ci.sh
    - task: PublishTestResults@2
      inputs:
        testRunner: JUnit
        testResultsFiles: '**/results/tests.xml'
        failTaskOnFailedTests: true
        testRunTitle: E2E UI Tests
    - bash: if [ -d integration-tests/ui-e2e/cypress/screenshots ]; then
              echo "##vso[task.setVariable variable=SCREENSHOTSEXIST]true";
            fi;
            if [ -d integration-tests/ui-e2e/cypress/videos ]; then
              echo "##vso[task.setVariable variable=VIDEOSEXIST]true";
            fi;
      displayName: Check artifacts exist
    - task: PublishPipelineArtifact@1
      displayName: Publish Screenshots
      condition: eq(variables.SCREENSHOTSEXIST, 'true')
      inputs:
        targetPath: $(Build.SourcesDirectory)/integration-tests/ui-e2e/cypress/screenshots
        artifactName: E2E UI Tests Screenshots
    - task: PublishPipelineArtifact@1
      displayName: Publish Videos
      condition: eq(variables.VIDEOSEXIST, 'true')
      inputs:
        targetPath: $(Build.SourcesDirectory)/integration-tests/ui-e2e/cypress/videos
        artifactName: E2E UI Tests Videos

- stage: CreateReleaseCandidate
  displayName: Tag images as Release Candidates
  jobs:
  - job: TagImage
    displayName: Tag and Push images
    pool:
      vmImage: $(vmImageName)
    steps:
    - task: Docker@2
      displayName: Login to ACR
      inputs:
        command: login
        containerRegistry: $(dockerHubServiceConnection)
    - task: Docker@2
      displayName: Pull backend Test Candidate image
      inputs:
        command: pull
        arguments: docker.io/specmore/spectacular-backend-test-candidate:$(tag)
    - task: Docker@2
      displayName: Tag backend Release Candidate image
      inputs:
        command: tag
        arguments: docker.io/specmore/spectacular-backend-test-candidate:$(tag) docker.io/specmore/spectacular-backend-release-candidate:$(tag)
    - task: Docker@2
      displayName: Push backend Release Candidate image
      inputs:
        command: push
        containerRegistry: $(dockerHubServiceConnection)
        repository: specmore/spectacular-backend-release-candidate
        tags: $(tag)
    - task: Docker@2
      displayName: Pull web Test Candidate image
      inputs:
        command: pull
        arguments: docker.io/specmore/spectacular-web-test-candidate:$(tag)
    - task: Docker@2
      displayName: Tag web Release Candidate image
      inputs:
        command: tag
        arguments: docker.io/specmore/spectacular-web-test-candidate:$(tag) docker.io/specmore/spectacular-web-release-candidate:$(tag)
    - task: Docker@2
      displayName: Push web Release Candidate image
      inputs:
        command: push
        containerRegistry: $(dockerHubServiceConnection)
        repository: specmore/spectacular-web-release-candidate
        tags: $(tag)
